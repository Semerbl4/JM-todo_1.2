{"version":3,"sources":["NewTaskForm/NewTaskForm.js","Task/Task.js","TaskList/TaskList.js","TaskFilter/TaskFilter.js","Footer/Footer.js","App/App.js","index.js"],"names":["NewTaskForm","props","className","placeholder","autoFocus","Task","state","isCompleted","completed","editing","active","completeToogler","setState","completeChanged","id","currentTaskDestroyed","taskDestroyed","this","type","onClick","defaultValue","React","Component","TaskList","todoData","arrTaskList","map","element","key","TaskFilter","Footer","App","serverInfo","JSON","stringify","parse","newServerInfo","el","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a4fd587.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./NewTaskForm.css\";\r\n\r\nlet NewTaskForm = (props) => (\r\n  <header className=\"header\">\r\n    <h1>todos</h1>\r\n    <input\r\n      className=\"new-todo\"\r\n      placeholder=\"What needs to be done?\"\r\n      autoFocus\r\n    />\r\n  </header>\r\n);\r\n\r\nexport default NewTaskForm;\r\n","import React from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\n\r\nimport \"./Task.css\";\r\n\r\nclass Task extends React.Component {\r\n  state = {\r\n    isCompleted: true,\r\n  };\r\n\r\n  completed = (\r\n    <label>\r\n      <span className=\"description\">Completed task</span>\r\n      <span className=\"created\">created 17 seconds ago</span>\r\n    </label>\r\n  );\r\n\r\n  editing = (\r\n    <label>\r\n      <span className=\"description\">Editing task</span>\r\n      <span className=\"created\">created 5 minutes ago</span>\r\n    </label>\r\n  );\r\n\r\n  active = (\r\n    <label>\r\n      <span className=\"description\">Active task</span>\r\n      <span className=\"created\">created 5 minutes ago</span>\r\n    </label>\r\n  );\r\n\r\n  completeToogler = () => {\r\n    let { isCompleted } = this.state;\r\n    this.setState((state) => {\r\n      // console.log(state);\r\n\r\n      return {\r\n        isCompleted: !isCompleted,\r\n      };\r\n    });\r\n    // console.log(this.state);\r\n    // console.log(this.props.id);\r\n\r\n    this.props.completeChanged(this.props.id, isCompleted);\r\n  };\r\n\r\n  currentTaskDestroyed = () => {\r\n    let { id } = this.props;\r\n\r\n    this.props.taskDestroyed(id);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <li {...this.props}>\r\n        <div className=\"view\">\r\n          <input\r\n            className=\"toggle\"\r\n            type=\"checkbox\"\r\n            onClick={this.completeToogler}\r\n          />\r\n          {this.props.className === \"editing\"\r\n            ? this.editing\r\n            : this.props.className === \"completed\"\r\n            ? this.completed\r\n            : this.active}\r\n          <button className=\"icon icon-edit\"></button>\r\n          <button\r\n            className=\"icon icon-destroy\"\r\n            onClick={this.currentTaskDestroyed}\r\n          ></button>\r\n        </div>\r\n        {this.props.className === \"editing\" ? (\r\n          <input\r\n            type=\"text\"\r\n            className=\"edit\"\r\n            defaultValue=\"Editing task\"\r\n          ></input>\r\n        ) : null}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\n\r\nimport \"./TaskList.css\";\r\n\r\nimport Task from \"../Task/Task\";\r\n\r\nlet TaskList = ({ todoData, completeChanged, taskDestroyed }) => {\r\n  let arrTaskList = todoData.map((element) => {\r\n    return (\r\n      <Task\r\n        {...element}\r\n        key={element.id}\r\n        completeChanged={() => completeChanged()}\r\n        taskDestroyed={taskDestroyed}\r\n      />\r\n    );\r\n  });\r\n\r\n  return <ul className=\"todo-list\">{arrTaskList}</ul>;\r\n};\r\n\r\nexport default TaskList;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./TaskFilter.css\";\r\n\r\nlet TaskFilter = (props) => (\r\n  <ul className=\"filters\">\r\n    <li>\r\n      <button className=\"selected\">All</button>\r\n    </li>\r\n    <li>\r\n      <button>Active</button>\r\n    </li>\r\n    <li>\r\n      <button>Completed</button>\r\n    </li>\r\n  </ul>\r\n);\r\n\r\nexport default TaskFilter;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport TaskFilter from \"../TaskFilter/TaskFilter\";\r\n\r\nimport \"./Footer.css\";\r\n\r\nlet Footer = (props) => (\r\n  <footer className=\"footer\">\r\n    <span className=\"todo-count\">1 items left</span>\r\n    <TaskFilter />\r\n    <button className=\"clear-completed\">Clear completed</button>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport NewTaskForm from \"../NewTaskForm/NewTaskForm\";\r\nimport TaskList from \"../TaskList/TaskList\";\r\nimport Footer from \"../Footer/Footer\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    serverInfo: [{ id: 1 }, { id: 2, className: \"editing\" }, { id: 3 }],\r\n  };\r\n\r\n  completeChanged = (id, isCompleted) => {\r\n    let { serverInfo } = this.state;\r\n    serverInfo = JSON.stringify(serverInfo);\r\n    serverInfo = JSON.parse(serverInfo);\r\n\r\n    if (isCompleted) {\r\n      let newServerInfo = serverInfo.map((el) => {\r\n        if (el.id === id) {\r\n          el.className = \"completed\";\r\n        }\r\n        return el;\r\n      });\r\n      // console.log(\"меняем на completed\");\r\n      // console.log(newServerInfo);\r\n\r\n      this.setState({ serverInfo: newServerInfo });\r\n    } else if (!isCompleted) {\r\n      let newServerInfo = serverInfo.map((el) => {\r\n        if (el.id === id) {\r\n          delete el.className;\r\n        }\r\n        return el;\r\n      });\r\n\r\n      // console.log(\"удаляем className\");\r\n\r\n      this.setState({ serverInfo: newServerInfo });\r\n    }\r\n  };\r\n\r\n  taskDestroyed = (id) => {\r\n    let { serverInfo } = this.state;\r\n    serverInfo = JSON.stringify(serverInfo);\r\n    serverInfo = JSON.parse(serverInfo);\r\n\r\n    let newServerInfo = serverInfo.filter((el) => {\r\n      return el.id !== id;\r\n    });\r\n\r\n    this.setState({ serverInfo: newServerInfo });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"todoapp\">\r\n        <NewTaskForm />\r\n        <TaskList\r\n          todoData={this.state.serverInfo}\r\n          completeChanged={this.completeChanged}\r\n          taskDestroyed={this.taskDestroyed}\r\n        />\r\n        <Footer />\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}